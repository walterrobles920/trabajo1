# Programa de Herencia - Sistema de Clasificaci√≥n Animal
# Clase base Animal con clases hijas: Herb√≠voro, Carn√≠voro, Omn√≠voro

class Animal:
    """
    Clase base Animal que contiene los atributos y m√©todos comunes
    para todos los tipos de animales
    """
    def __init__(self, nombre, edad, peso, habitat):
        self.nombre = nombre
        self.edad = edad
        self.peso = peso
        self.habitat = habitat
    
    def mostrar_info_basica(self):
        """M√©todo para mostrar informaci√≥n b√°sica del animal"""
        print(f"Nombre: {self.nombre}")
        print(f"Edad: {self.edad} a√±os")
        print(f"Peso: {self.peso} kg")
        print(f"H√°bitat: {self.habitat}")
    
    def hacer_sonido(self):
        """M√©todo gen√©rico para hacer sonido"""
        print(f"{self.nombre} hace un sonido")


class Herbivoro(Animal):
    """
    Clase hija Herb√≠voro que hereda de Animal
    Atributos adicionales espec√≠ficos para herb√≠voros
    """
    def __init__(self, nombre, edad, peso, habitat, tipo_planta_favorita, horas_pastoreo):
        # Llamar al constructor de la clase padre
        super().__init__(nombre, edad, peso, habitat)
        # Atributos espec√≠ficos de herb√≠voros
        self.tipo_planta_favorita = tipo_planta_favorita
        self.horas_pastoreo = horas_pastoreo
        self.tipo_alimentacion = "Herb√≠voro"
    
    def mostrar_info_completa(self):
        """Mostrar toda la informaci√≥n del herb√≠voro"""
        print("=== INFORMACI√ìN DEL HERB√çVORO ===")
        self.mostrar_info_basica()
        print(f"Tipo de alimentaci√≥n: {self.tipo_alimentacion}")
        print(f"Planta favorita: {self.tipo_planta_favorita}")
        print(f"Horas de pastoreo diarias: {self.horas_pastoreo}")
    
    def pastar(self):
        """M√©todo espec√≠fico de herb√≠voros"""
        print(f"{self.nombre} est√° pastando {self.tipo_planta_favorita}")


class Carnivoro(Animal):
    """
    Clase hija Carn√≠voro que hereda de Animal
    Atributos adicionales espec√≠ficos para carn√≠voros
    """
    def __init__(self, nombre, edad, peso, habitat, tipo_presa_favorita, velocidad_caza):
        # Llamar al constructor de la clase padre
        super().__init__(nombre, edad, peso, habitat)
        # Atributos espec√≠ficos de carn√≠voros
        self.tipo_presa_favorita = tipo_presa_favorita
        self.velocidad_caza = velocidad_caza
        self.tipo_alimentacion = "Carn√≠voro"
    
    def mostrar_info_completa(self):
        """Mostrar toda la informaci√≥n del carn√≠voro"""
        print("=== INFORMACI√ìN DEL CARN√çVORO ===")
        self.mostrar_info_basica()
        print(f"Tipo de alimentaci√≥n: {self.tipo_alimentacion}")
        print(f"Presa favorita: {self.tipo_presa_favorita}")
        print(f"Velocidad de caza: {self.velocidad_caza} km/h")
    
    def cazar(self):
        """M√©todo espec√≠fico de carn√≠voros"""
        print(f"{self.nombre} est√° cazando {self.tipo_presa_favorita} a {self.velocidad_caza} km/h")


class Omnivoro(Animal):
    """
    Clase hija Omn√≠voro que hereda de Animal
    Atributos adicionales espec√≠ficos para omn√≠voros
    """
    def __init__(self, nombre, edad, peso, habitat, alimento_vegetal_favorito, alimento_animal_favorito, porcentaje_vegetales):
        # Llamar al constructor de la clase padre
        super().__init__(nombre, edad, peso, habitat)
        # Atributos espec√≠ficos de omn√≠voros
        self.alimento_vegetal_favorito = alimento_vegetal_favorito
        self.alimento_animal_favorito = alimento_animal_favorito
        self.porcentaje_vegetales = porcentaje_vegetales
        self.tipo_alimentacion = "Omn√≠voro"
    
    def mostrar_info_completa(self):
        """Mostrar toda la informaci√≥n del omn√≠voro"""
        print("=== INFORMACI√ìN DEL OMN√çVORO ===")
        self.mostrar_info_basica()
        print(f"Tipo de alimentaci√≥n: {self.tipo_alimentacion}")
        print(f"Alimento vegetal favorito: {self.alimento_vegetal_favorito}")
        print(f"Alimento animal favorito: {self.alimento_animal_favorito}")
        print(f"Porcentaje de vegetales en dieta: {self.porcentaje_vegetales}%")
    
    def alimentarse_variado(self):
        """M√©todo espec√≠fico de omn√≠voros"""
        print(f"{self.nombre} se alimenta tanto de {self.alimento_vegetal_favorito} como de {self.alimento_animal_favorito}")


# ================== PROGRAMA PRINCIPAL ==================

def main():
    print("üêæ SISTEMA DE CLASIFICACI√ìN ANIMAL - HERENCIA üêæ")
    print("=" * 55)
    
    # Instanciar objetos de cada tipo
    
    # 1. Crear un objeto Herb√≠voro
    herbivoro1 = Herbivoro(
        nombre="Cebra",
        edad=5,
        peso=300,
        habitat="Sabana africana",
        tipo_planta_favorita="Pasto tierno",
        horas_pastoreo=12
    )
    
    # 2. Crear un objeto Carn√≠voro
    carnivoro1 = Carnivoro(
        nombre="Le√≥n",
        edad=8,
        peso=180,
        habitat="Sabana africana",
        tipo_presa_favorita="√ëu",
        velocidad_caza=60
    )
    
    # 3. Crear un objeto Omn√≠voro
    omnivoro1 = Omnivoro(
        nombre="Oso Pardo",
        edad=12,
        peso=400,
        habitat="Bosque templado",
        alimento_vegetal_favorito="Bayas y miel",
        alimento_animal_favorito="Salm√≥n",
        porcentaje_vegetales=70
    )
    
    # Mostrar informaci√≥n de todos los objetos
    print("\n" + "=" * 55)
    herbivoro1.mostrar_info_completa()
    herbivoro1.pastar()
    
    print("\n" + "=" * 55)
    carnivoro1.mostrar_info_completa()
    carnivoro1.cazar()
    
    print("\n" + "=" * 55)
    omnivoro1.mostrar_info_completa()
    omnivoro1.alimentarse_variado()
    
    # Demostrar el polimorfismo - todos pueden hacer sonido
    print("\n" + "=" * 55)
    print("üîä DEMOSTRACI√ìN DE POLIMORFISMO - SONIDOS:")
    print("-" * 55)
    herbivoro1.hacer_sonido()
    carnivoro1.hacer_sonido()
    omnivoro1.hacer_sonido()
    
    # Crear m√°s ejemplos
    print("\n" + "=" * 55)
    print("üìã EJEMPLOS ADICIONALES:")
    print("-" * 55)
    
    # M√°s herb√≠voros
    elefante = Herbivoro("Elefante", 25, 5000, "Sabana", "Hojas de acacia", 16)
    elefante.mostrar_info_completa()
    
    print("\n" + "-" * 55)
    
    # M√°s carn√≠voros
    tiburon = Carnivoro("Tibur√≥n Blanco", 15, 2000, "Oc√©ano", "Focas", 40)
    tiburon.mostrar_info_completa()
    
    print("\n" + "-" * 55)
    
    # M√°s omn√≠voros
    cerdo = Omnivoro("Cerdo Dom√©stico", 3, 150, "Granja", "Vegetales", "Insectos", 60)
    cerdo.mostrar_info_completa()
    
    print("\n" + "=" * 55)
    print("‚úÖ PROGRAMA COMPLETADO EXITOSAMENTE")


# Ejecutar el programa principal
if __name__ == "__main__":
    main()